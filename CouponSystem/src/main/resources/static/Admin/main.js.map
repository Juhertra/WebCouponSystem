{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/AdminApp/Components/company/company.component.css","webpack:///./src/app/AdminApp/Components/company/company.component.html","webpack:///./src/app/AdminApp/Components/company/company.component.ts","webpack:///./src/app/AdminApp/Components/createcompany/createcompany.component.css","webpack:///./src/app/AdminApp/Components/createcompany/createcompany.component.html","webpack:///./src/app/AdminApp/Components/createcompany/createcompany.component.ts","webpack:///./src/app/AdminApp/Components/createcustomer/createcustomer.component.css","webpack:///./src/app/AdminApp/Components/createcustomer/createcustomer.component.html","webpack:///./src/app/AdminApp/Components/createcustomer/createcustomer.component.ts","webpack:///./src/app/AdminApp/Components/customers/customers.component.css","webpack:///./src/app/AdminApp/Components/customers/customers.component.html","webpack:///./src/app/AdminApp/Components/customers/customers.component.ts","webpack:///./src/app/Common/Company.ts","webpack:///./src/app/Common/Customer.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/search/search.component.css","webpack:///./src/app/search/search.component.html","webpack:///./src/app/search/search.component.ts","webpack:///./src/app/services/admin.service.ts","webpack:///./src/app/signup/signup.component.css","webpack:///./src/app/signup/signup.component.html","webpack:///./src/app/signup/signup.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,qBAAqB,2BAA2B,GAAG,UAAU,8CAA8C,GAAG,eAAe,kBAAkB,gBAAgB,oBAAoB,oBAAoB,GAAG,qBAAqB,gBAAgB,GAAG,sDAAsD,gBAAgB,eAAe,oBAAoB,GAAG,uEAAuE,mBAAmB,GAAG,wDAAwD,kBAAkB,mBAAmB,gBAAgB,GAAG,sEAAsE,aAAa,kBAAkB,qBAAqB,0BAA0B,KAAK,GAAG,4CAA4C,+CAA+C,kBAAkB,uBAAuB,8BAA8B,GAAG,C;;;;;;;;;;;ACA52B,iGAAiG,0JAA0J,uBAAuB,cAAc,qqBAAqqB,mBAAmB,iKAAiK,ifAAif,oBAAoB,kjBAAkjB,uBAAuB,ozB;;;;;;;;;;;;;;;;;;;;;;;;;ACArpE;AAEY;AAQ9D;IAKE,0BAAoB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;QACxC,IAAI,CAAC,eAAe,EAAE;IACxB,CAAC;IAED,mCAAQ,GAAR;IACA,CAAC;IAED,0CAAe,GAAf;QAAA,iBAMC;QALC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAC9C,UAAC,IAAI;YACH,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE;QAC9B,CAAC,CACF;IACH,CAAC;IACD,wCAAa,GAAb,UAAc,OAAgB;QAC5B,mBAAmB;QACnB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CACnD,UAAC,IAAI;YACH,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QAEnB,CAAC,CACF;IACH,CAAC;IAED,wCAAa,GAAb,UAAc,OAAgB;QAC5B,gBAAgB;QAChB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CACnD,UAAC,IAAI;YACH,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,CAAC,CACF;IACH,CAAC;IAtCU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;yCAM8B,oEAAY;OAL/B,gBAAgB,CAuC5B;IAAD,uBAAC;CAAA;AAvC4B;;;;;;;;;;;;ACV7B,gCAAgC,uBAAuB,4BAA4B,kBAAkB,eAAe,kBAAkB,GAAG,gMAAgM,0CAA0C,mCAAmC,gCAAgC,2BAA2B,sBAAsB,KAAK,GAAG,C;;;;;;;;;;;ACA/e,2+BAA2+B,gBAAgB,kL;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAz8B;AACb;AACa;AACY;AAO9D;IAKE,gCAAoB,KAAY,EAAU,QAAsB;QAA5C,UAAK,GAAL,KAAK,CAAO;QAAU,aAAQ,GAAR,QAAQ,CAAc;QAHxD,cAAS,GAAW,EAAE,CAAC;QAC/B,YAAO,GAAa,IAAI,uDAAO,EAAE;QAI/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;IAE9C,CAAC;IAED,yCAAQ,GAAR;IAEA,CAAC;IAED,8CAAa,GAAb;QACE,iBAAiB;QACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CACvE,UAAC,IAAI;YAEH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,CAAC,CACF;IACH,CAAC;IAvBU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;yCAM4B,kDAAI,EAAoB,oEAAY;OALrD,sBAAsB,CAyBlC;IAAD,6BAAC;CAAA;AAzBkC;;;;;;;;;;;;ACVnC,gCAAgC,uBAAuB,4BAA4B,kBAAkB,eAAe,kBAAkB,GAAG,gMAAgM,0CAA0C,mCAAmC,gCAAgC,2BAA2B,sBAAsB,KAAK,GAAG,C;;;;;;;;;;;ACA/e,6rBAA6rB,iBAAiB,qL;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5pB;AACb;AACe;AACU;AAO9D;IAKE,iCAAoB,KAAY,EAAU,QAAsB;QAA5C,UAAK,GAAL,KAAK,CAAO;QAAU,aAAQ,GAAR,QAAQ,CAAc;QAHxD,cAAS,GAAW,EAAE,CAAC;QAC/B,aAAQ,GAAc,IAAI,yDAAQ;QAIhC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;IAC9C,CAAC;IAED,0CAAQ,GAAR;IACA,CAAC;IAED,gDAAc,GAAd;QACE,iBAAiB;QACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CACzE,UAAC,IAAI;YAEH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QAEnB,CAAC,CACF;IACH,CAAC;IAtBU,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAM4B,kDAAI,EAAoB,oEAAY;OALrD,uBAAuB,CAuBnC;IAAD,8BAAC;CAAA;AAvBmC;;;;;;;;;;;;ACVpC,qBAAqB,2BAA2B,GAAG,UAAU,8CAA8C,GAAG,eAAe,kBAAkB,gBAAgB,oBAAoB,oBAAoB,GAAG,qBAAqB,gBAAgB,GAAG,sDAAsD,gBAAgB,eAAe,oBAAoB,GAAG,uEAAuE,mBAAmB,GAAG,wDAAwD,kBAAkB,mBAAmB,gBAAgB,GAAG,sEAAsE,aAAa,kBAAkB,qBAAqB,0BAA0B,KAAK,GAAG,4CAA4C,+CAA+C,kBAAkB,uBAAuB,8BAA8B,GAAG,C;;;;;;;;;;;ACA52B,kGAAkG,iKAAiK,uBAAuB,eAAe,0qBAA0qB,mBAAmB,iKAAiK,wdAAwd,uBAAuB,qzB;;;;;;;;;;;;;;;;;;;;;;;;;ACApkD;AAEY;AAO9D;IAKE,2BAAoB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;QACxC,IAAI,CAAC,eAAe,EAAE;IACxB,CAAC;IAED,oCAAQ,GAAR;IACA,CAAC;IAED,2CAAe,GAAf;QAAA,iBAUC;QATC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAC9C,UAAC,IAAI;YACH,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE;QAC9B,CAAC,EACD,eAAK;YACH,KAAK,CAAC,QAAQ,GAAG,cAAM,YAAI,CAAC,QAAQ,EAAb,CAAa,CAAC;YACrC,MAAM,KAAK,CAAC;QACd,CAAC,CACF;IACH,CAAC;IAED,0CAAc,GAAd,UAAe,QAAkB;QAAjC,iBAYC;QAXC,mBAAmB;QACnB,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,SAAS,CACrD,UAAC,IAAI;YACH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,CAAC,EACD,eAAK;YACH,KAAK,CAAC,QAAQ,GAAG,cAAM,YAAI,CAAC,QAAQ,EAAb,CAAa,CAAC;YACrC,MAAM,KAAK,CAAC;QACd,CAAC,CACF;IACH,CAAC;IAED,0CAAc,GAAd,UAAe,QAAkB;QAAjC,iBAYC;QAXC,gBAAgB;QAChB,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,SAAS,CACrD,UAAC,IAAI;YACH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;YACrB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,CAAC,EACD,eAAK;YACH,KAAK,CAAC,QAAQ,GAAG,cAAM,YAAI,CAAC,QAAQ,EAAb,CAAa,CAAC;YACrC,MAAM,KAAK,CAAC;QACd,CAAC,CACF;IACH,CAAC;IAlDU,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAM8B,oEAAY;OAL/B,iBAAiB,CAmD7B;IAAD,wBAAC;CAAA;AAnD6B;;;;;;;;;;;;;ACT9B;AAAA;AAAA;IAEE,iBAAmB,EAAW,EAAS,IAAa,EAAS,QAAiB,EAAS,KAAc;QAAlF,OAAE,GAAF,EAAE,CAAS;QAAS,SAAI,GAAJ,IAAI,CAAS;QAAS,aAAQ,GAAR,QAAQ,CAAS;QAAS,UAAK,GAAL,KAAK,CAAS;IAGrG,CAAC;IAEH,cAAC;AAAD,CAAC;;;;;;;;;;;;;;ACPD;AAAA;AAAA;IAEE,kBAAmB,EAAW,EAAS,IAAa,EAAS,QAAiB;QAA3D,OAAE,GAAF,EAAE,CAAS;QAAS,SAAI,GAAJ,IAAI,CAAS;QAAS,aAAQ,GAAR,QAAQ,CAAS;IAG9E,CAAC;IAEH,eAAC;AAAD,CAAC;;;;;;;;;;;;;ACPD,mB;;;;;;;;;;;ACAA,8jD;;;;;;;;;;;;;;;;;;;;;;;;;ACA0C;AACc;AAOxD;IAKE,sBAAoB,QAAsB;QAAtB,aAAQ,GAAR,QAAQ,CAAc;QAJ1C,UAAK,GAAG,iBAAiB,CAAC;IAIoB,CAAC;IAE/C,6BAAM,GAAN;QAAA,iBAQC;QAPC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAChE,UAAC,IAAI;YAEH,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,aAAa;QAChE,CAAC,CACF;IAEH,CAAC;IAfU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAM8B,oEAAY;OAL/B,YAAY,CAiBxB;IAAD,mBAAC;CAAA;AAjBwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACN;AAEP;AACF;AACa;AACT;AACyB;AAEzB;AACoC;AACK;AACgB;AACH;AACzC;AAEJ;AACG;AAiD3D;IAAA;IAAyB,CAAC;IAAb,SAAS;QA5CrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,+FAAgB;gBAChB,oGAAiB;gBACjB,qHAAuB;gBACvB,kHAAsB;gBACtB,yEAAe;gBACf,yEAAe;aAChB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,wDAAU;gBACV,qEAAgB;gBAChB,QAAQ;gBACR,4DAAY,CAAC,OAAO,CAAC;oBACnB;wBACE,IAAI,EAAE,gBAAgB;wBACtB,SAAS,EAAE,qHAAuB;qBACnC;oBACD;wBACE,IAAI,EAAE,eAAe;wBACrB,SAAS,EAAE,kHAAsB;qBAClC;oBACD;wBACE,IAAI,EAAE,iBAAiB;wBACvB,SAAS,EAAE,+FAAgB;qBAC5B;oBACD;wBACE,IAAI,EAAE,iBAAiB;wBACvB,SAAS,EAAE,oGAAiB;qBAC7B;oBACD;wBACE,IAAI,EAAE,QAAQ;wBACd,SAAS,EAAE,yEAAe;qBAC3B;iBACF,CAAC;aACH;YACD,SAAS,EAAE,CAAC,qEAAY;gBACtB,EAAE,OAAO,EAAE,gEAAgB,EAAE,QAAQ,EAAE,oEAAoB,EAAE,CAAC;YAChE,OAAO,EAAE,CAAC,4DAAY,CAAC;YACvB,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AClEtB,4BAA4B,oDAAoD,iEAAiE,gEAAgE,mDAAmD,qCAAqC,0DAA0D,kDAAkD,gDAAgD,wCAAwC,cAAc,8BAA8B,uCAAuC,4CAA4C,4CAA4C,4BAA4B,8BAA8B,qBAAqB,wCAAwC,qBAAqB,iBAAiB,iFAAiF,IAAI,2CAA2C,oGAAoG,GAAG,G;;;;;;;;;;;ACA5hC,yNAAyN,wCAAwC,yT;;;;;;;;;;;;;;;;;;;;;;;;ACA/M;AAOlD;IAEE;IAAgB,CAAC;IAEjB,kCAAQ,GAAR;QACE;YACE,IAAI,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;YAC9C,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACnC,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC3C,EAAE,GAAG,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACtC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC9B,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzC,IAAI,EAAE,EAAE;oBACN,QAAQ,GAAG,EAAE,CAAC,WAAW,IAAI,EAAE,CAAC,SAAS,CAAC;oBAC1C,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;wBAC/C,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;qBAC1B;yBAAM;wBACL,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;qBAC9B;iBACF;aACF;QACH,CAAC;IACH,CAAC;IAvBU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;;OACW,eAAe,CAwB3B;IAAD,sBAAC;CAAA;AAxB2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPe;AACU;AACV;AACE;AAO7C;IAYE,sBAAoB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;QAThC,YAAO,GAAa,IAAI,uDAAO,EAAE,CAAC;QAClC,aAAQ,GAAc,IAAI,yDAAQ,EAAE;QACpC,aAAQ,GAAW,OAAO,CAAC;QAC3B,WAAM,GAAW,WAAW,CAAC;QAC7B,SAAI,GAAW,MAAM,CAAC;QACtB,cAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI;QACjE,iBAAY,GAAG,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IAIjF,CAAC;IAED,oCAAa,GAAb,UAAc,OAAO,EAAE,QAAQ;QAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC;IACzE,CAAC;IAEM,6CAAsB,GAA7B;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC;IAC9D,CAAC;IAEM,8CAAuB,GAA9B,UAA+B,OAAgB;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC;IAC/E,CAAC;IAEM,4CAAqB,GAA5B,UAA6B,OAAgB;QAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,OAAO,CAAC,EAAE,CAAC;IAC3E,CAAC;IAEM,2CAAoB,GAA3B,UAA4B,OAAgB;QAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,gBAAgB,GAAG,OAAO,CAAC,EAAE,EAAE,IAAI,4DAAc,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;IAClH,CAAC;IAEM,2CAAoB,GAA3B,UAA4B,OAAgB;QAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,gBAAgB,GAAG,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC;IACnF,CAAC;IAEM,6CAAsB,GAA7B;QACC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,CAAC;IAC7D,CAAC;IAEM,+CAAwB,GAA/B,UAAgC,QAAkB;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,oBAAoB,GAAG,QAAQ,CAAC,IAAI,CAAC;IACjF,CAAC;IAEM,6CAAsB,GAA7B,UAA8B,QAAkB;QAC9C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,cAAc,GAAG,QAAQ,CAAC,EAAE,CAAC;IACzE,CAAC;IAEM,4CAAqB,GAA5B,UAA6B,QAAkB;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,QAAQ,CAAC,EAAE,EAAE,IAAI,4DAAc,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;IACrH,CAAC;IAEM,4CAAqB,GAA5B,UAA6B,QAAkB;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,iBAAiB,GAAG,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC;IACtF,CAAC;IAzDU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAa4B,kDAAI;OAZrB,YAAY,CA0DxB;IAAD,mBAAC;CAAA;AA1DwB;;;;;;;;;;;;ACVzB,mB;;;;;;;;;;;ACAA,khBAAkhB,sjD;;;;;;;;;;;;;;;;;;;;;;;;ACAhe;AAOlD;IAEE;IAAgB,CAAC;IAEjB,kCAAQ,GAAR;IACA,CAAC;IALU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;;OACW,eAAe,CAO3B;IAAD,sBAAC;CAAA;AAP2B;;;;;;;;;;;;;ACP5B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: Arial, Helvetica, sans-serif;\\n}\\n\\n.closebtn {\\n  padding: 30px;\\n  color: #888;\\n  font-size: 20px;\\n  cursor: pointer;\\n}\\n\\n.closebtn:hover {\\n  color: #000;\\n}\\n\\n/* Float four columns side by side */\\n\\n.column {\\n  float: left;\\n  width: 25%;\\n  padding: 0 10px;\\n}\\n\\n/* Remove extra left and right margins, due to padding */\\n\\n.row {\\n  margin: 0 -5px;\\n}\\n\\n/* Clear floats after the columns */\\n\\n.row:after {\\n  content: \\\"\\\";\\n  display: table;\\n  clear: both;\\n}\\n\\n/* Responsive columns */\\n\\n@media screen and (max-width: 600px) {\\n  .column {\\n    width: 100%;\\n    display: block;\\n    margin-bottom: 20px;\\n  }\\n}\\n\\n/* Style the counter cards */\\n\\n.card {\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\\n  padding: 16px;\\n  text-align: center;\\n  background-color: #f1f1f1;\\n}\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"column\\\" *ngFor=\\\"let company of companies; let i = index\\\" >\\n    <div class=\\\"card\\\">\\n      <div *ngIf=\\\"company?.name\\\">\\n        <span class=\\\"closebtn\\\" (click)=deleteCompany(company)>&times;</span>\\n        <h3>{{company.name}}</h3>\\n        <!-- Button trigger modal -->\\n        <button type=\\\"button\\\" (click)=\\\"j = i\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#companyModal\\\">\\n          Update\\n        </button>\\n      </div>\\n      <!-- Modal -->\\n      <div class=\\\"modal fade\\\" id=\\\"companyModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"companyModalLabel\\\"\\n        aria-hidden=\\\"true\\\" ngModal=company>\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n              <div *ngIf=\\\"companies[j]?.name\\\">\\n                <h5 class=\\\"modal-title\\\" id=\\\"companyModalLabel\\\">{{companies[j].name}}</h5>\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                  <span aria-hidden=\\\"true\\\">&times;</span>\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n              <form>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"companyInputEmail1\\\">Email address</label>\\n                  <div *ngIf=\\\"companies[j]?.email\\\">\\n                    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"companyInputEmail1\\\" aria-describedby=\\\"emailHelp\\\"\\n                      placeholder=\\\"Enter email\\\" value=\\\"{{companies[j].email}}\\\" [(ngModel)]=\\\"companies[j].email\\\" name=\\\"email\\\" #email=\\\"ngModel\\\">\\n                    <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.</small>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"companyInputPassword1\\\">Password</label>\\n                  <div *ngIf=\\\"companies[j]?.password\\\">\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"companyInputPassword1\\\" placeholder=\\\"Password\\\" value=\\\"{{companies[j].password}}\\\" [(ngModel)]=\\\"companies[j].password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\">\\n                  </div>\\n                </div>\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"exampleCheck1\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"exampleCheck1\\\">Show Password</label>\\n                </div>\\n              </form>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button>\\n              <button type=\\\"button\\\" (click)=updateCompany(companies[j]) class=\\\"btn btn-primary\\\">Update changes</button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <p><br></p>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Company } from '../../../Common/Company';\nimport { AdminService } from '../../../services/admin.service'\n\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})\nexport class CompanyComponent implements OnInit {\n\n  public companies: Company[]\n  public company: Company\n\n  constructor(private _service: AdminService) {\n    this.getAllCompanies()\n  }\n\n  ngOnInit() {\n  }\n\n  getAllCompanies() {\n    this._service.getAllCompaniesService().subscribe(\n      (resp) => {\n        this.companies = resp.json()\n      }\n    )\n  }\n  deleteCompany(company: Company) {\n    // fire ajax Delete\n    this._service.deleteCompanyService(company).subscribe(\n      (resp) => {\n        console.log(company)\n        console.log(resp)\n\n      }\n    )\n  }\n\n  updateCompany(company: Company) {\n    // fire ajax Put\n    this._service.updateCompanyService(company).subscribe(\n      (resp) => {\n        console.log(company)\n        console.log(resp)\n      }\n    )\n  }\n}\n","module.exports = \"\\n.container {\\n  border-radius: 5px;\\n  background-color: white;\\n  padding: 20px;\\n  width: 40%;\\n  float: center;\\n} \\n\\n/* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */ \\n\\n@media screen and (max-width: 600px) {\\n  .col-25, .col-75, input[type=button] {\\n      width: -webkit-fit-content;\\n      width: -moz-fit-content;\\n      width: fit-content;\\n      margin-top: 0;\\n  }\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <form>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-25\\\">\\n        <label for=\\\"cname\\\">Company Name</label>\\n      </div>\\n      <div class=\\\"col-75\\\">\\n        <input type=\\\"text\\\" id=\\\"cname\\\" name=\\\"companyname\\\" placeholder=\\\"Company name\\\" [(ngModel)]=\\\"company.name\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-25\\\">\\n        <label for=\\\"cpass\\\">Password</label>\\n      </div>\\n      <div class=\\\"col-75\\\">\\n        <input type=\\\"password\\\" id=\\\"companyPassword\\\" name=\\\"comppass\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"company.password\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-25\\\">\\n        <label for=\\\"cmail\\\">E-mail</label>\\n      </div>\\n      <div class=\\\"col-75\\\">\\n        <input type=\\\"email\\\" id=\\\"cmail\\\" name=\\\"mail\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"E-mail\\\" [(ngModel)]=\\\"company.email\\\">\\n      </div>\\n    </div><br>\\n    <div hidden>\\n      {{company | json}}\\n    </div>\\n    <div class=\\\"row\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"createCompany()\\\">Create company</button>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Company } from '../../../Common/Company';\nimport { AdminService } from '../../../services/admin.service'\n\n@Component({\n  selector: 'app-createcompany',\n  templateUrl: './createcompany.component.html',\n  styleUrls: ['./createcompany.component.css']\n})\nexport class CreatecompanyComponent implements OnInit {\n\n  private httpspath: String = \"\";\n  company : Company = new Company()\n\n  constructor(private _http : Http, private _service: AdminService) { \n    \n    this.httpspath = this._service.adminApiPath;\n    \n  }\n\n  ngOnInit() {\n    \n  }\n\n  createCompany(){\n    // fire ajax POST\n    this._http.post(this.httpspath + \"createCompany\", this.company).subscribe(\n      (resp) =>\n      {\n        console.log(resp)\n      }\n    )\n  }\n  \n}\n","module.exports = \"\\n.container {\\n  border-radius: 5px;\\n  background-color: white;\\n  padding: 20px;\\n  width: 40%;\\n  float: center;\\n} \\n\\n/* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */ \\n\\n@media screen and (max-width: 600px) {\\n  .col-25, .col-75, input[type=button] {\\n      width: -webkit-fit-content;\\n      width: -moz-fit-content;\\n      width: fit-content;\\n      margin-top: 0;\\n  }\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <form>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-25\\\">\\n        <label for=\\\"custname\\\">Customer Name</label>\\n      </div>\\n      <div class=\\\"col-75\\\">\\n        <input type=\\\"text\\\" id=\\\"custname\\\" name=\\\"customername\\\" placeholder=\\\"Customer name\\\" [(ngModel)]=\\\"customer.name\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-25\\\">\\n        <label for=\\\"custpass\\\">Password</label>\\n      </div>\\n      <div class=\\\"col-75\\\">\\n        <input type=\\\"password\\\" id=\\\"custpass\\\" name=\\\"customerpass\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"customer.password\\\">\\n      </div>\\n    </div><br>\\n    <div hidden>\\n      {{customer | json}}\\n    </div>\\n    <div class=\\\"row\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"createCustomer()\\\" >Create Customer</button>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Customer } from '../../../Common/Customer';\nimport { AdminService } from '../../../services/admin.service'\n\n@Component({\n  selector: 'app-createcustomer',\n  templateUrl: './createcustomer.component.html',\n  styleUrls: ['./createcustomer.component.css']\n})\nexport class CreatecustomerComponent implements OnInit {\n\n  private httpspath: String = \"\";\n  customer : Customer = new Customer\n\n  constructor(private _http : Http, private _service: AdminService) { \n    \n    this.httpspath = this._service.adminApiPath;\n  }\n\n  ngOnInit() {\n  }\n\n  createCustomer(){\n    // fire ajax POST\n    this._http.post(this.httpspath + \"createCustomer\", this.customer).subscribe(\n      (resp) =>\n      {\n        console.log(resp)\n        \n      }\n    )\n  }\n}\n","module.exports = \"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: Arial, Helvetica, sans-serif;\\n}\\n\\n.closebtn {\\n  padding: 30px;\\n  color: #888;\\n  font-size: 20px;\\n  cursor: pointer;\\n}\\n\\n.closebtn:hover {\\n  color: #000;\\n}\\n\\n/* Float four columns side by side */\\n\\n.column {\\n  float: left;\\n  width: 25%;\\n  padding: 0 10px;\\n}\\n\\n/* Remove extra left and right margins, due to padding */\\n\\n.row {\\n  margin: 0 -5px;\\n}\\n\\n/* Clear floats after the columns */\\n\\n.row:after {\\n  content: \\\"\\\";\\n  display: table;\\n  clear: both;\\n}\\n\\n/* Responsive columns */\\n\\n@media screen and (max-width: 600px) {\\n  .column {\\n    width: 100%;\\n    display: block;\\n    margin-bottom: 20px;\\n  }\\n}\\n\\n/* Style the counter cards */\\n\\n.card {\\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\\n  padding: 16px;\\n  text-align: center;\\n  background-color: #f1f1f1;\\n}\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"column\\\" *ngFor=\\\"let customer of customers; let i = index\\\">\\n    <div class=\\\"card\\\"> \\n      <div *ngIf=\\\"customer?.name\\\">\\n        <span class=\\\"closebtn\\\" (click)=\\\"deleteCustomer(customer)\\\">&times;</span>\\n        <h3>{{customer.name}}</h3>\\n        <!-- Button trigger modal -->\\n        <button type=\\\"button\\\" (click)=\\\"j = i\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#customerModal\\\">\\n          Update\\n        </button>\\n      </div>\\n      <!-- Modal -->\\n      <div class=\\\"modal fade\\\" id=\\\"customerModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"customerModalLabel\\\"\\n        aria-hidden=\\\"true\\\" ngModal=customer>\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n              <div *ngIf=\\\"customers[j]?.name\\\">\\n                <h5 class=\\\"modal-title\\\" id=\\\"customerModalLabel\\\">{{customers[j].name}}</h5>\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                  <span aria-hidden=\\\"true\\\">&times;</span>\\n                </button>\\n              </div>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n              <form>\\n                <div class=\\\"form-group\\\">\\n                  <label for=\\\"customerInputPassword1\\\">Password</label>\\n                  <div *ngIf=\\\"customers[j]?.password\\\">\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"customerInputPassword1\\\" placeholder=\\\"Password\\\"\\n                      value=\\\"{{customers[j].password}}\\\" [(ngModel)]=\\\"customers[j].password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\">\\n                  </div>\\n                </div>\\n                <div class=\\\"form-check\\\">\\n                  <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"exampleCheck1\\\">\\n                  <label class=\\\"form-check-label\\\" for=\\\"exampleCheck1\\\">Show Password</label>\\n                </div>\\n              </form>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button>\\n              <button type=\\\"button\\\" (click)=updateCustomer(customers[j]) class=\\\"btn btn-primary\\\">Update changes</button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <p><br></p>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../../../Common/Customer';\nimport { AdminService } from '../../../services/admin.service'\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomerComponent implements OnInit {\n\n  customers: Customer[]\n  customer: Customer\n\n  constructor(private _service: AdminService) {\n    this.getAllCustomers()\n  }\n\n  ngOnInit() {\n  }\n\n  getAllCustomers() {\n    this._service.getAllCustomersService().subscribe(\n      (resp) => {\n        this.customers = resp.json()\n      },\n      error => {\n        error.callback = () => this.customer;\n        throw error;\n      }\n    )\n  }\n\n  deleteCustomer(customer: Customer) {\n    // fire ajax delete\n    this._service.deleteCustomerService(customer).subscribe(\n      (resp) => {\n        console.log(customer)\n        console.log(resp)\n      },\n      error => {\n        error.callback = () => this.customer;\n        throw error;\n      }\n    )\n  }\n\n  updateCustomer(customer: Customer) {\n    // fire ajax Put\n    this._service.updateCustomerService(customer).subscribe(\n      (resp) => {\n        console.log(customer)\n        console.log(resp)\n      },\n      error => {\n        error.callback = () => this.customer;\n        throw error;\n      }\n    )\n  }\n}\n","export class Company{\n\n  constructor(public id?: number, public name?: string, public password?: string, public email?: string)\n  {\n\n  }\n  \n}","export class Customer{\n\n  constructor(public id?: number, public name?: string, public password?: string)\n  {\n\n  }\n  \n}","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-inverse\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"navbar-header\\\">\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse\\\">\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n            </button>\\n            <a class=\\\"navbar-brand\\\">Coupon System</a>\\n        </div>\\n        <div class=\\\"collapse navbar-collapse\\\">\\n            <ul class=\\\"nav navbar-nav\\\">\\n                <li>\\n                    <a routerLink=\\\"/createcompany\\\">Create Company</a>\\n                </li>\\n                <li>\\n                    <a routerLink=\\\"/createcustomer\\\">Create Customer</a>\\n                </li>\\n                <li>\\n                    <a routerLink=\\\"/getallcompanies\\\">Companies</a>\\n                </li>\\n                <li>\\n                    <a routerLink=\\\"/getallcustomers\\\">Customers</a>\\n                </li>\\n            </ul>\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                <li>\\n                    <a input type=\\\"search\\\" id=\\\"autosearch\\\" routerLink=\\\"/search\\\"><span>Search...</span></a>\\n                </li>\\n                <li>\\n                    <a (click)=logout()>Logout</a>\\n                </li>\\n                <li>\\n                    <a>Admin</a>\\n                </li>\\n            </ul>\\n        </div>\\n    </div>\\n</nav>\\n\\n<div class=\\\"container\\\">\\n    <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\nimport { AdminService } from './services/admin.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'WebCouponSystem';\n  request: Request;\n  response: Response\n\n  constructor(private _service: AdminService) { }\n\n  logout() {\n    this._service.logoutService(this.request, this.response).subscribe(\n      (resp) =>\n      {\n        window.location.href = this._service.loginPath + \"/login.html\"\n      }\n    )\n\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Component } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common'\n\nimport { AppComponent } from './app.component';\nimport { CompanyComponent } from './AdminApp/Components/company/company.component';\nimport { CustomerComponent } from './AdminApp/Components/customers/customers.component';\nimport { CreatecustomerComponent } from './AdminApp/Components/createcustomer/createcustomer.component';\nimport { CreatecompanyComponent } from './AdminApp/Components/createcompany/createcompany.component';\nimport { SignupComponent } from './signup/signup.component';\n\nimport { AdminService } from './services/admin.service';\nimport { SearchComponent } from './search/search.component'\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CompanyComponent,\n    CustomerComponent,\n    CreatecustomerComponent,\n    CreatecompanyComponent,\n    SignupComponent,\n    SearchComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n    // Swal,\n    RouterModule.forRoot([\n      {\n        path: 'createcustomer',\n        component: CreatecustomerComponent,\n      },\n      {\n        path: 'createcompany',\n        component: CreatecompanyComponent,\n      },\n      {\n        path: 'getallcompanies',\n        component: CompanyComponent,\n      },\n      {\n        path: 'getallcustomers',\n        component: CustomerComponent,\n      },\n      {\n        path: 'search',\n        component: SearchComponent,\n      }\n    ])\n  ],\n  providers: [AdminService,\n    { provide: LocationStrategy, useClass: HashLocationStrategy }],\n  exports: [RouterModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","module.exports = \"#myInput {\\n  /* background-image: url('/css/searchicon.png'); Add a search icon to input */\\n  background-position: 10px 12px; /* Position the search icon */\\n  background-repeat: no-repeat; /* Do not repeat the icon image */\\n  width: 100%; /* Full-width */\\n  font-size: 16px; /* Increase font-size */\\n  padding: 12px 20px 12px 40px; /* Add some padding */\\n  border: 1px solid #ddd; /* Add a grey border */\\n  margin-bottom: 12px; /* Add some space below the input */\\n}\\n\\n#myTable {\\n  border-collapse: collapse; /* Collapse borders */\\n  width: 100%; /* Full-width */\\n  border: 1px solid #ddd; /* Add a grey border */\\n  font-size: 18px; /* Increase font-size */\\n}\\n\\n#myTable th, #myTable td {\\n  text-align: left; /* Left-align text */\\n  padding: 12px; /* Add padding */\\n}\\n\\n#myTable tr {\\n  /* Add a bottom border to all table rows */\\n  border-bottom: 1px solid #ddd; \\n}\\n\\n#myTable tr.header, #myTable tr:hover {\\n  /* Add a grey background color to the table header and on hover */\\n  background-color: #f1f1f1;\\n}\\n\"","module.exports = \"<input type=\\\"text\\\" id=\\\"myInput\\\" onkeyup=\\\"myFunction()\\\" placeholder=\\\"Search for names..\\\" [(ngModel)]=\\\"binding\\\">\\n\\n<table id=\\\"myTable\\\">\\n  <tr class=\\\"header\\\">\\n    <th style=\\\"width:60%;\\\">Name</th>\\n    <th style=\\\"width:40%;\\\">Country</th>\\n  </tr>\\n  <tr>\\n    <td>Alfreds Futterkiste</td>\\n    <td>Germany</td>\\n  </tr>\\n  <tr>\\n    <td>Berglunds snabbkop</td>\\n    <td>Sweden</td>\\n  </tr>\\n  <tr>\\n    <td>Island Trading</td>\\n    <td>UK</td>\\n  </tr>\\n  <tr>\\n    <td>Koniglich Essen</td>\\n    <td>Germany</td>\\n  </tr>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n    function myFunction() {\n      var input, filter, table, tr, td, i, txtValue;\n      input = document.getElementById(\"myInput\");\n      filter = input.value.toUpperCase();\n      table = document.getElementById(\"myTable\");\n      tr = table.getElementsByTagName(\"tr\");\n      for (i = 0; i < tr.length; i++) {\n        td = tr[i].getElementsByTagName(\"td\")[0];\n        if (td) {\n          txtValue = td.textContent || td.innerText;\n          if (txtValue.toUpperCase().indexOf(filter) > -1) {\n            tr[i].style.display = \"\";\n          } else {\n            tr[i].style.display = \"none\";\n          }\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Http, RequestOptions } from '@angular/http';\nimport { Company } from '../Common/Company'\nimport { Customer } from '../Common/Customer'\nimport swal from 'sweetalert2';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  request : Request\n  response : Response\n  company : Company = new Company();\n  customer : Customer = new Customer()\n  protocol: String = \"https\";\n  server: String = \"localhost\";\n  port: String = \"8443\";\n  loginPath = this.protocol + \"://\" + this.server + \":\" + this.port\n  adminApiPath = this.protocol + \"://\" + this.server + \":\" + this.port + \"/Admin/\";\n  \n  \n  constructor(private _http : Http) { \n  }\n\n  logoutService(request, response) {\n    return this._http.post(this.adminApiPath + \"logout\", request, response)\n  }\n\n  public getAllCompaniesService(){\n    return this._http.get(this.adminApiPath + \"getAllCompanies\")\n  }\n\n  public getCompanyByNameService(company: Company){\n    return this._http.get(this.adminApiPath + \"getCompanyByName/\" + company.name)\n  }\n\n  public getCompanyByIDService(company: Company){\n    return this._http.get(this.adminApiPath + \"getCompanyByID/\" + company.id)\n  }\n\n  public deleteCompanyService(company: Company){\n    return this._http.delete(this.adminApiPath + \"removeCompany/\" + company.id, new RequestOptions({body: company}))\n  }\n\n  public updateCompanyService(company: Company){\n    return this._http.put(this.adminApiPath + \"updateCompany/\" + company.id, company)\n  }\n\n  public getAllCustomersService(){\n   return this._http.get(this.adminApiPath + \"getAllCustomers\")\n  }\n\n  public getCustomerByNameService(customer: Customer){\n    return this._http.get(this.adminApiPath + \"getCustomerByName/\" + customer.name)\n  }\n\n  public getCustomerByIDService(customer: Customer){\n    return this._http.get(this.adminApiPath + \"getCustomer/\" + customer.id)\n  }\n\n  public deleteCustomerService(customer: Customer) {\n    return this._http.delete(this.adminApiPath + \"removeCustomer/\" + customer.id, new RequestOptions({body: customer}))\n  }\n  \n  public updateCustomerService(customer: Customer){\n    return this._http.put(this.adminApiPath + \"updateCustomer/\" + customer.id, customer)\n  }\n}\n","module.exports = \"\"","module.exports = \"<!-- <div class=\\\"modal fade\\\" id=\\\"modalRegisterForm\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n      <div class=\\\"modal-content\\\">\\n          <div class=\\\"modal-header text-center\\\">\\n              <h4 class=\\\"modal-title w-100 font-weight-bold\\\">Sign up</h4>\\n              <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                  <span aria-hidden=\\\"true\\\">&times;</span>\\n              </button>\\n          </div>\\n          <div class=\\\"modal-body mx-3\\\">\\n              <div class=\\\"md-form mb-5\\\">\\n                  <i class=\\\"fa fa-user prefix grey-text\\\"></i>\\n                  <input type=\\\"text\\\" id=\\\"orangeForm-name\\\" class=\\\"form-control validate\\\">\\n                  <label data-error=\\\"wrong\\\" data-success=\\\"right\\\" for=\\\"orangeForm-name\\\">Your name</label>\\n              </div>\\n              <div class=\\\"md-form mb-5\\\">\\n                  <i class=\\\"fa fa-envelope prefix grey-text\\\"></i>\\n                  <input type=\\\"email\\\" id=\\\"orangeForm-email\\\" class=\\\"form-control validate\\\">\\n                  <label data-error=\\\"wrong\\\" data-success=\\\"right\\\" for=\\\"orangeForm-email\\\">Your email</label>\\n              </div>\\n\\n              <div class=\\\"md-form mb-4\\\">\\n                  <i class=\\\"fa fa-lock prefix grey-text\\\"></i>\\n                  <input type=\\\"password\\\" id=\\\"orangeForm-pass\\\" class=\\\"form-control validate\\\">\\n                  <label data-error=\\\"wrong\\\" data-success=\\\"right\\\" for=\\\"orangeForm-pass\\\">Your password</label>\\n              </div>\\n\\n          </div>\\n          <div class=\\\"modal-footer d-flex justify-content-center\\\">\\n              <button class=\\\"btn btn-deep-orange\\\">Sign up</button>\\n          </div>\\n      </div>\\n  </div>\\n</div> -->\\n\\n<!-- <div class=\\\"text-center\\\"> -->\\n  <!-- <a href=\\\"\\\" class=\\\"btn btn-default btn-rounded mb-4\\\" data-toggle=\\\"modal\\\" data-target=\\\"#modalRegisterForm\\\">Launch Modal Register Form</a> -->\\n<!-- </div> -->\\n<!-- <p>\\n  This works\\n</p> -->\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}